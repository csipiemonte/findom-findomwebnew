/*******************************************************************************
 * Copyright Regione Piemonte - 2020
 * SPDX-License-Identifier: EUPL-1.2-or-later
 ******************************************************************************/
package it.csi.findom.findomwebnew.presentation.util;

import java.util.Hashtable;
import java.util.Vector;

import org.apache.log4j.Logger;

public class ControlCodFisc {

	/**
	* This class was generated by a SmartGuide.
	*
	*/

	private String strCodFisc;
	private static Vector vctCd;
	private static Vector vctCp;
	private static Vector vctNd;
	private static Vector vctNp;
	private static Vector vctVm; // vector dei mesi

	// private static Vector ceck;
	private static String ritorno;

	protected static final Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".util");
	
	/**
	* Costruttore aparametrico della classe.
	*/
	public ControlCodFisc(String g) {

		strCodFisc = g;

		creaCarattereDispari();
		creaCaratterePari();
		creaNumeroDispari();
		creaNumeroPari();
		creaMese();

	}

	//Metodo da richiamare per la correttezza del formato
	public boolean validaCodFiscale() {

		boolean esito = controllaCheckDigit() && controllaCorrettezza();

		return esito;
	}
	/**
	* This method was created by a SmartGuide.
	* @return char
	*/
	public boolean controllaCheckDigit() {
		int intAppoggio = 0;
		char chrCarattereEsaminato;

		// Ciclo di conteggio dei valori sui primi 15 caratteri del codice
		// fiscale
		for (int i = 0; i < 15; i++) {
			chrCarattereEsaminato = getCodFisc().charAt(i);
			String strElem = getCodFisc().substring(i, i + 1);
			int intResto = (i % 2);
			switch (intResto) {
				case 0 :
					if (Character.isDigit(chrCarattereEsaminato) == false) {
						intAppoggio += getVectCarDisp(strElem);
					} else {
						intAppoggio += getVectNumDisp(strElem);
					}
					break;
				case 1 :
					if (Character.isDigit(chrCarattereEsaminato) == false) {
						intAppoggio += getVectCarPari(strElem);
					} else {
						intAppoggio += getVectNumPari(strElem);
					}
					break;
				default :
					break;

			}
		}

		// Estraggo il carattere di controllo
		String ceckdigit = getCodFisc().substring(15, 16);
		log.info("carattere di controllo: " + (intAppoggio % 26) + getVectCarPari(ceckdigit));
		return (intAppoggio % 26) == getVectCarPari(ceckdigit);
	}
	/**
	* Questo metodo e' stato creato VisualAge.
	* @return boolean
	*/
	public boolean controllaCorrettezza() {
		//controllo numero caratteri
		if(strCodFisc.length()!=16){
			return false;
		}
		if (controllaCorrettezzaChar() == '0')
			return true;
		else
			return false;
		
	}
	/**
	* This method was created by a SmartGuide.
	* @return char
	* @
	*/
	public char controllaCorrettezzaChar() {
		boolean bolLettera = false;
		for (int i = 0; i < 6; i++) {
			if (!(Character.isLetter(strCodFisc.charAt(i)))) // controllo dei
				// primi 6
				return '2'; // caratteri alfabetici
		}
		for (int i = 6; i < 8; i++) {
			if (!(Character.isDigit(strCodFisc.charAt(i)))) // controllo
				// dell'anno
				return '2';
		}

		if (!((strCodFisc.charAt(8) != 'A') || (strCodFisc.charAt(8) != 'B')
				|| // controllo del mese
				(strCodFisc.charAt(8) != 'C') || (strCodFisc.charAt(8) != 'D') || (strCodFisc.charAt(8) != 'E') || (strCodFisc.charAt(8) != 'H') || (strCodFisc.charAt(8) != 'L') || (strCodFisc.charAt(8) != 'M') || (strCodFisc.charAt(8) != 'P')
				|| (strCodFisc.charAt(8) != 'R') || (strCodFisc.charAt(8) != 'S') || (strCodFisc.charAt(8) != 'T')))
			return '2';

		for (int i = 9; i < 11; i++) // 31/05/00
		{
			if (!(Character.isDigit(strCodFisc.charAt(i)))) // controllo
				// dell'anno
				return '2';
		}
		int intGiorno = Integer.parseInt(strCodFisc.substring(9, 11)); // controllo
		// formale
		// del
		// giorno
		if (intGiorno > 31)
			intGiorno -= 40;
		if (intGiorno < 1 || intGiorno > 31)
			return '2';

		String strElem = strCodFisc.substring(8, 9); // lettera del mese
		String strMese = String.valueOf(getVectMese(strElem)); // valore della
		// lettera del
		// mese

		if (strMese.length() == 1) // se mese ha una sola cifra
			strMese = "0" + strMese; // viene aggiunto uno zero

		String strAnno = strCodFisc.substring(6, 8);

		String strGiorno = String.valueOf(intGiorno); // se giorno ha una sola
		// cifra
		if (strGiorno.length() == 1) // viene aggiunto uno zero
			strGiorno = "0" + strGiorno;

		String data = strGiorno + strMese + strAnno; // controllo dell'intera
		// data

		// if (!(U1AJ011C.controlloData(data)))
		if (!(controllaData(data)))
			return '2';
		if (// !
		((strCodFisc.charAt(11) != 'A') && (strCodFisc.charAt(11) != 'B') &&
		// controllo del 1^ carattere
				(strCodFisc.charAt(11) != 'C') && (strCodFisc.charAt(11) != 'D') &&
				// del codice catastale
				(strCodFisc.charAt(11) != 'E') && (strCodFisc.charAt(11) != 'F') &&

				(strCodFisc.charAt(11) != 'G') && (strCodFisc.charAt(11) != 'H') &&

				(strCodFisc.charAt(11) != 'I') && (strCodFisc.charAt(11) != 'L') &&

				(strCodFisc.charAt(11) != 'M') && (strCodFisc.charAt(11) != 'Z')))
			return '2';
		for (int i = 6; i < 8; i++) {
			if (!(Character.isDigit(strCodFisc.charAt(i))))
				if ((strCodFisc.charAt(i) != 'L') && (strCodFisc.charAt(i) != 'M') && // controllo del 1^ carattere
						(strCodFisc.charAt(i) != 'N') && (strCodFisc.charAt(i) != 'P') && // del codice catastale
						(strCodFisc.charAt(i) != 'Q') && (strCodFisc.charAt(i) != 'R') && (strCodFisc.charAt(i) != 'S') && (strCodFisc.charAt(i) != 'T') && (strCodFisc.charAt(i) != 'U') && (strCodFisc.charAt(i) != 'V'))
					return '3';
		}

		for (int i = 9; i < 11; i++) {
			if (!(Character.isDigit(strCodFisc.charAt(i))))
				if ((strCodFisc.charAt(i) != 'L') && (strCodFisc.charAt(i) != 'M') && // controllo del 1^ carattere
						(strCodFisc.charAt(i) != 'N') && (strCodFisc.charAt(i) != 'P') && // del codice catastale
						(strCodFisc.charAt(i) != 'Q') && (strCodFisc.charAt(i) != 'R') && (strCodFisc.charAt(i) != 'S') && (strCodFisc.charAt(i) != 'T') && (strCodFisc.charAt(i) != 'U') && (strCodFisc.charAt(i) != 'V'))
					return '3';
		}

		for (int i = 12; i < 15; i++) {
			if (!(Character.isDigit(strCodFisc.charAt(i)))) {
				bolLettera = true;
				if ((strCodFisc.charAt(i) != 'L') && (strCodFisc.charAt(i) != 'M') && // controllo del 1^ carattere
						(strCodFisc.charAt(i) != 'N') && (strCodFisc.charAt(i) != 'P') && // del codice catastale
						(strCodFisc.charAt(i) != 'Q') && (strCodFisc.charAt(i) != 'R') && (strCodFisc.charAt(i) != 'S') && (strCodFisc.charAt(i) != 'T') && (strCodFisc.charAt(i) != 'U') && (strCodFisc.charAt(i) != 'V'))
					return '3';
			}
		}

		if (bolLettera = false) {
			int intNumeroCodCat = Integer.parseInt(strCodFisc.substring(12, 15));

			if (intNumeroCodCat == 000)
				return '2';

			if ((strCodFisc.charAt(11) == 'M') && (intNumeroCodCat > 399)) // se lettera M le 3 cifre
				return '2'; // del cod. cat. non > di 399
		}

		// if (checkcontrol())
		if (controllaCheckDigit())
			return '0';
		return '1';
		//return '0';

	}
	/**
	* Questo metodo e' stato creato VisualAge.
	* @return int
	*/
	public int controllaCorrettezzaInt() {
		return ((char) controllaCorrettezzaChar() - 48);
	}
	/**
	* This method was created by a SmartGuide.
	* @return boolean
	*/
	public static boolean controllaData(String s) {

		//controllo l'anno dopo averlo estrapolato dalla stringa
		try {
			String strAnno = s.substring(4, s.length());
			if ((s.length() == 8) || (s.length() == 6)) {
				if (s.length() == 6) {
					strAnno = "19" + s;
				}
				if (Integer.parseInt(strAnno) < 1870) {
					return false;
				}
			} else {/*
							 * scriviDiagnostici("Warning !!!! Lunghezza della data errata." +
							 * s);
							 */
				return false;

			}

			// Estrapolazione mese e giorno
			String strMese = s.substring(2, 4);
			String strGiorno = s.substring(0, 2);

			// Trasformazione delle stringhe in interi
			int intMese = Integer.parseInt(strMese);
			int intGiorno = Integer.parseInt(strGiorno);
			int intAnno = Integer.parseInt(strAnno);

			// controlli di ammissibilita' sul giorno e sul mese
			if ((intMese > 12) || (intGiorno > 31) || (intMese < 1) || (intGiorno < 1)) {
				return false;
			}

			// controllo mese
			switch (intMese) {
			// febbraio
				case 2 :
					boolean bisestile = false;
					if (intAnno % 4 == 0) {
						if (intAnno % 400 == 0) {
							if (intAnno % 1000 == 0) {
								bisestile = true;
							}
						} else {
							bisestile = true;
						}
					}
					if ((bisestile && (intGiorno > 29)) || (!bisestile && (intGiorno > 28))) {
						return false;
					}
					break;
				// aprile
				case 4 :
					if (intGiorno > 30) {
						return false;
					}
					break;
				// giugno
				case 6 :
					if (intGiorno > 30) {
						return false;
					}
					break;
				//settembre
				case 9 :
					if (intGiorno > 30) {
						return false;
					}
					break;
				//novembre
				case 11 :
					if (intGiorno > 30) {
						return false;
					}
					break;

				default :
					break;
			}
			//se arrivo a questo punto vuol dire che la data e' corretta
			return true;
		} catch (Exception e) {
			log.error("[ControlCodFisc::controllaData] Exception="+e);
			return false;
		}
	}
	/**
	* Tabella (di tipo Vector) dei valori dei caratteri dispari.
	*/
	public Vector creaCarattereDispari() {
		// Vector cd = new Vector();

		this.vctCd = new Vector();

		vctCd.addElement("B"); //valore dei caratteri dispari
		vctCd.addElement("A");
		vctCd.addElement("K");
		vctCd.addElement("P");
		vctCd.addElement("L");
		vctCd.addElement("C");
		vctCd.addElement("Q");
		vctCd.addElement("D");
		vctCd.addElement("R");
		vctCd.addElement("E");
		vctCd.addElement("V");
		vctCd.addElement("O");
		vctCd.addElement("S");
		vctCd.addElement("F");
		vctCd.addElement("T");
		vctCd.addElement("G");
		vctCd.addElement("U");
		vctCd.addElement("H");
		vctCd.addElement("M");
		vctCd.addElement("I");
		vctCd.addElement("N");
		vctCd.addElement("J");
		vctCd.addElement("W");
		vctCd.addElement("Z");
		vctCd.addElement("Y");
		vctCd.addElement("X");

		return vctCd;
	}
	/**
	* Tabella (di tipo Vector) dei valori dei caratteri pari.
	*/
	public Vector creaCaratterePari() {
		this.vctCp = new Vector();

		vctCp.addElement("A"); //valore dei caratteri pari
		vctCp.addElement("B");
		vctCp.addElement("C");
		vctCp.addElement("D");
		vctCp.addElement("E");
		vctCp.addElement("F");
		vctCp.addElement("G");
		vctCp.addElement("H");
		vctCp.addElement("I");
		vctCp.addElement("J");
		vctCp.addElement("K");
		vctCp.addElement("L");
		vctCp.addElement("M");
		vctCp.addElement("N");
		vctCp.addElement("O");
		vctCp.addElement("P");
		vctCp.addElement("Q");
		vctCp.addElement("R");
		vctCp.addElement("S");
		vctCp.addElement("T");
		vctCp.addElement("U");
		vctCp.addElement("V");
		vctCp.addElement("W");
		vctCp.addElement("X");
		vctCp.addElement("Y");
		vctCp.addElement("Z");

		return vctCp;
	}
	/**
	* This method was created by a SmartGuide.
	* @return vector
	*/
	public Vector creaMese() {
		this.vctVm = new Vector();

		vctVm.addElement(" ");
		vctVm.addElement("A"); // gennaio
		vctVm.addElement("B"); // febbraio
		vctVm.addElement("C"); // marzo
		vctVm.addElement("D"); // aprile
		vctVm.addElement("E"); // maggio
		vctVm.addElement("H"); // giugno
		vctVm.addElement("L"); // luglio
		vctVm.addElement("M"); // agosto
		vctVm.addElement("P"); // settembre
		vctVm.addElement("R"); // ottobre
		vctVm.addElement("S"); // novembre
		vctVm.addElement("T"); // dicembre

		return vctVm;
	}
	/**
	* Tabella (di tipo Vector) dei valori dei numeri dispari.
	*/
	public Vector creaNumeroDispari() {
		this.vctNd = new Vector();

		vctNd.addElement("1"); //valore dei numeri dispari
		vctNd.addElement("0");
		vctNd.addElement(" ");
		vctNd.addElement(" ");
		vctNd.addElement(" ");
		vctNd.addElement("2");
		vctNd.addElement(" ");
		vctNd.addElement("3");
		vctNd.addElement(" ");
		vctNd.addElement("4");
		vctNd.addElement(" ");
		vctNd.addElement(" ");
		vctNd.addElement(" ");
		vctNd.addElement("5");
		vctNd.addElement(" ");
		vctNd.addElement("6");
		vctNd.addElement(" ");
		vctNd.addElement("7");
		vctNd.addElement(" ");
		vctNd.addElement("8");
		vctNd.addElement(" ");
		vctNd.addElement("9");

		return vctNd;
	}
	/**
	* Tabella (di tipo Vector) dei valori dei numeri pari.
	*/
	public Vector creaNumeroPari() {
		this.vctNp = new Vector();

		vctNp.addElement("0"); //valore dei numeri pari
		vctNp.addElement("1");
		vctNp.addElement("2");
		vctNp.addElement("3");
		vctNp.addElement("4");
		vctNp.addElement("5");
		vctNp.addElement("6");
		vctNp.addElement("7");
		vctNp.addElement("8");
		vctNp.addElement("9");

		return vctNp;
	}
	/**
	* Questo metodo prende il codice fiscale come parametro e torna una stringa.
	* @return java.lang.String
	*/
	public String getCodFisc() {
		String s = new String(this.strCodFisc);
		return s;
	}
	/**
	* This method was created by a SmartGuide.
	* @return java.lang.String
	*/
	public String getRitorno() {
		String s = new String(this.ritorno);
		return s /* null */;
	}
	/**
	* Calcola valore del carattere dispari.
	*/
	public int getVectCarDisp(String elem) {

		return this.vctCd.indexOf(elem);

	}
	/**
	* Calcola valore del carattere pari.
	* @return int
	*/
	public int getVectCarPari(String elem) {
		return this.vctCp.indexOf(elem);

	}
	/**
	* This method was created by a SmartGuide.
	* @return int
	* @param elem java.lang.String
	*/
	public int getVectMese(String stringa) {

		return this.vctVm.indexOf(stringa);
	}
	/**
	* Calcola valore del numero dispari.
	* @return int
	*/
	public int getVectNumDisp(String elem) {
		return this.vctNd.indexOf(elem);
	}
	/**
	*Calcola valore del numero pari.
	* @return int
	*/
	public int getVectNumPari(String elem) {
		return this.vctNp.indexOf(elem);
	}
	/**
	* Inizializzazione di un codice fiscale come stringa.
	* @param s java.lang.String
	*/
	public void setCodFisc(String s) {
		this.strCodFisc = new String(s);
		return;
	}

	//Controllo coerenza codice fiscale
	//return 0 : il codice e' corretto
	//return 1 : e' sbagliato il cognome
	//return 2 : e' sbagliato il nome
	//return 3 : e' sbagliato il giorno e/o il sesso
	//return 4 : e' sbagliato il mese
	//return 5 : e' sbagliato l'anno
	//return 6 : e' sbagliato il codice comune
	//return 7 : e' sdbagliato il codice di controllo
	//return 8: omocodia sbagliata
	public int calcolaSeparatamenteCodiceFiscale(String cognome, String nome, int giorno, String sesso, String mese, String annoDieci, String annoZero, String codComune) {
		int somma = 0;

		String strMese = getCodFisc().charAt(8) + "";
		String strAnno = getCodFisc().substring(6, 8);
		String strComune = getCodFisc().substring(11, 15);
		String strgiornosex = "";
		String chrcontrollo = "";
		String codFiscaleFinale = "";

		boolean esito = false;

		if (!this.processaCognome(cognome))
			return 1;
		if (!this.processaNome(nome))
			return 2;
		if (!this.processaSesso(giorno, sesso))
			return 3;
		log.info("controllo codice fiscale. " + strMese + "--" + ritornaMese(mese));
		if (!strMese.equals(ritornaMese(mese)))
			return 4;
		log.info("controllo codice fiscale. " + strAnno + "--" + annoDieci + annoZero);

		/**CONTROLLO OMOCODIA***/
		//mi aspetto un numero: se ho una lettera controllo che
		//sia un caso di omocodia, usando la tabella di decodifica.
		if (!StringUtils.isNumeric(strAnno)) {
			strAnno = decodificaOmocodia(strAnno);
		}

		log.info("controllo codice fiscale: anno " + strAnno + "--" + annoDieci + annoZero);
		if (strAnno == null) {
			return 8;
		} else if (!strAnno.equals(annoDieci + annoZero))
			return 5;
		log.info("controllo codice fiscale. " + strComune + "--" + codComune);

		/**CONTROLLO OMOCODIA***/
		//mi aspetto un numero: se ho una lettera controllo che
		//sia un caso di omocodia, usando la tabella di decodifica.
		String strComuneNumerico = getCodFisc().substring(12, 15);
		char strComuneChar = getCodFisc().charAt(11);
		if (!StringUtils.isNumeric(strComuneNumerico)) {
			strComuneNumerico = decodificaOmocodia(strComuneNumerico);
		}

		log.info("controllo codice fiscale: comune/stato " + strComuneChar + strComuneNumerico + "--" + codComune);
		if (strComuneNumerico == null) {
			return 8;
		} else if (!(strComuneChar + strComuneNumerico).equals(codComune))
			return 6;

		//   strCodFis = strcognome + strnome + annoDieci + annoZero + ritornaMese(mese) + strgiornosex + codComune;
		if (!validaCodFiscale())
			return 7;
		return 0;

		//  codFiscaleFinale = strCodFis + chrcontrollo;
		//  log.info("controllo codice fiscale. " + codFiscaleFinale + "--" + getCodFisc(), "");
		//
		//  if(codFiscaleFinale.equals(getCodFisc()))
		//   esito = true;
		//
		//
		//   return esito;
	}

	public boolean processaCognome(String cognome) {

		String strcognome = "";
		boolean esito = false;
		// Processa il cognome
		//----------------------------------------------------------------
		for (int i = 0; i < cognome.length(); i++) {
			switch (cognome.charAt(i)) {
				case 'A' :
				case 'E' :
				case 'I' :
				case 'O' :
				case 'U' :
					break;
				default :
					if ((cognome.charAt(i) <= 'Z') && (cognome.charAt(i) > 'A'))
						strcognome = strcognome + cognome.charAt(i);
			}
		}
		if (strcognome.length() < 3) {
			for (int i = 0; i < cognome.length(); i++) {
				switch (cognome.charAt(i)) {
					case 'A' :
					case 'E' :
					case 'I' :
					case 'O' :
					case 'U' :
						strcognome = strcognome + cognome.charAt(i);
				}
			}
			if (strcognome.length() < 3) {
				for (int i = strcognome.length(); i <= 3; i++) {
					strcognome = strcognome + 'X';
				}
			}
		}
		strcognome = strcognome.substring(0, 3);
		//------------------------------------------------------------
		String cognomeCF = getCodFisc().substring(0, 3);
		log.info("controllo codice fiscale: cognome " + cognomeCF + "--" + strcognome);

		if (cognomeCF.equals(strcognome))
			esito = true;

		return esito;
	}

	public boolean processaNome(String nome) {

		String strnome = "";
		boolean esito = false;
		// processa il nome
		//----------------------------------------------------------------
		for (int i = 0; i < nome.length(); i++) {
			switch (nome.charAt(i)) {
				case 'A' :
				case 'E' :
				case 'I' :
				case 'O' :
				case 'U' :
					break;
				default :
					if ((nome.charAt(i) <= 'Z') && (nome.charAt(i) > 'A'))
						strnome = strnome + nome.charAt(i);
			}
		}
		if (strnome.length() > 3) {
			strnome = strnome.substring(0, 1) + strnome.substring(2, 4);
		} else {
			if (strnome.length() < 3) {
				for (int i = 0; i < nome.length(); i++) {
					switch (nome.charAt(i)) {
						case 'A' :
						case 'E' :
						case 'I' :
						case 'O' :
						case 'U' :
							strnome = strnome + nome.charAt(i);
					}
				}
				if (strnome.length() < 3) {
					for (int i = strnome.length(); i <= 3; i++) {
						strnome = strnome + 'X';
					}
				}
			}
			strnome = strnome.substring(0, 3);
		}
		//--------------------------------------- Fine processa nome
		String nomeCF = getCodFisc().substring(3, 6);
		log.info("controllo codice fiscale: nome " + nomeCF + "--" + strnome);

		if (nomeCF.equals(strnome))
			esito = true;

		return esito;
	}

	public boolean processaSesso(int giorno, String sesso) {

		int gs = 0;
		String strgiornosex = "";
		boolean esito = false;
		// processa giorno e sesso
		//--------------------------------------------
		int sessoNum = 0;
		if (sesso.equals("F"))
			sessoNum = 1;
		gs = (giorno + (40 * sessoNum));
		if (gs < 10)
			strgiornosex = "0" + gs;
		else
			strgiornosex = gs + "";
		//--------------------------------------------

		String sexgiorno = getCodFisc().substring(9, 11);
		log.info("controllo codice fiscale: sexgiorno " + sexgiorno + "--" + strgiornosex);

		/**CONTROLLO OMOCODIA***/
		//mi aspetto un numero: se ho una lettera controllo che
		//sia un caso di omocodia, usando la tabella di decodifica.
		if (!StringUtils.isNumeric(sexgiorno)) {
			sexgiorno = decodificaOmocodia(sexgiorno);
		}

		log.info("controllo codice fiscale: sexgiorno " + sexgiorno + "--" + strgiornosex);

		if (sexgiorno == null)
			esito = false;
		else if (sexgiorno.equals(strgiornosex))
			esito = true;

		return esito;
	}

	public String getGiorno() {

		String sexgiorno = getCodFisc().substring(9, 11);
		log.info("estrazione iniziale giorno da codice fiscale: sexgiorno " + sexgiorno);

		/**CONTROLLO OMOCODIA***/
		//mi aspetto un numero: se ho una lettera controllo che
		//sia un caso di omocodia, usando la tabella di decodifica.
		if (!StringUtils.isNumeric(sexgiorno)) {
			sexgiorno = decodificaOmocodia(sexgiorno);
		} else {
			//Controllo se comincia con lo zero
			if (sexgiorno.startsWith("0")) {
				sexgiorno = sexgiorno.substring(1, 2);
			}

			int sexgiornoInt = Integer.parseInt(sexgiorno);

			if (sexgiornoInt > 40)
				sexgiornoInt = sexgiornoInt - 40;

			//Controllo se e' compreso tra 1 e 9 e aggiungo uno zero
			if (sexgiornoInt <= 9)
				sexgiorno = "0" + sexgiornoInt;
			else {
				sexgiorno = sexgiornoInt + "";
			}
		}

		log.info("estrazione finale giorno da codice fiscale: sexgiorno " + sexgiorno);

		return sexgiorno;
	}

	public String getMese() {

		String strCodMese = getCodFisc().charAt(8) + "";
		String mese = "";
		log.info("estrazione iniziale mese da codice fiscale: strCodMese " + strCodMese);

		if (strCodMese.equals("A")) {
			mese = "01";
		} else if (strCodMese.equals("B")) {
			mese = "02";
		} else if (strCodMese.equals("C")) {
			mese = "03";
		} else if (strCodMese.equals("D")) {
			mese = "04";
		} else if (strCodMese.equals("E")) {
			mese = "05";
		} else if (strCodMese.equals("H")) {
			mese = "06";
		} else if (strCodMese.equals("L")) {
			mese = "07";
		} else if (strCodMese.equals("M")) {
			mese = "08";
		} else if (strCodMese.equals("P")) {
			mese = "09";
		} else if (strCodMese.equals("R")) {
			mese = "10";
		} else if (strCodMese.equals("S")) {
			mese = "11";
		} else if (strCodMese.equals("T")) {
			mese = "12";
		}

		log.info("estrazione finale mese da codice fiscale: sexgiorno " + mese);

		return mese;
	}

	public String getSesso() {

		String sesso = "";
		String sexgiorno = getCodFisc().substring(9, 11);

		log.info("estrazione iniziale sexgiorno da codice fiscale: sexgiorno " + sexgiorno);

		if (!StringUtils.isNumeric(sexgiorno)) {
			sexgiorno = decodificaOmocodia(sexgiorno);
		}

		if (sexgiorno == null)
			return "";

		int sexgiornoInt = Integer.parseInt(sexgiorno);

		if (sexgiornoInt > 40)
			sesso = "F";
		else
			sesso = "M";

		log.info("estrazione finale sexgiorno da codice fiscale: sexgiorno " + sexgiorno);

		return sesso;
	}

	public String decodificaOmocodia(String stringa) {

		String numeroOttenuto = "";
		if (stringa != null) {
			for (int i = 0; i < stringa.length(); i++) {

				//e' una lettera mentre mi aspetto un numero
				if (Character.isLetter(stringa.charAt(i))) {

					switch (stringa.charAt(i)) {
						case 'A' : {
							return null;
						}
						case 'B' : {
							return null;
						}
						case 'C' : {
							return null;
						}
						case 'D' : {
							return null;
						}
						case 'E' : {
							return null;
						}
						case 'F' : {
							return null;
						}
						case 'G' : {
							return null;
						}
						case 'H' : {
							return null;
						}
						case 'I' : {
							return null;
						}
						case 'J' : {
							return null;
						}
						case 'K' : {
							return null;
						}
						case 'L' : {
							numeroOttenuto += "0";
							break;
						}
						case 'M' : {
							numeroOttenuto += "1";
							break;
						}
						case 'N' : {
							numeroOttenuto += "2";
							break;
						}
						case 'O' : {
							return null;
						}
						case 'P' : {
							numeroOttenuto += "3";
							break;
						}
						case 'Q' : {
							numeroOttenuto += "4";
							break;
						}
						case 'R' : {
							numeroOttenuto += "5";
							break;
						}
						case 'S' : {
							numeroOttenuto += "6";
							break;
						}
						case 'T' : {
							numeroOttenuto += "7";
							break;
						}
						case 'U' : {
							numeroOttenuto += "8";
							break;
						}
						case 'V' : {
							numeroOttenuto += "9";
							break;
						}
						case 'W' : {
							return null;
						}
						case 'X' : {
							return null;
						}
						case 'Y' : {
							return null;
						}
						case 'Z' : {
							return null;
						}
					}
				} else
					numeroOttenuto += stringa.charAt(i);

			}
		}

		return numeroOttenuto;
	}

	/**
	 *  Controllo coerenza codice fiscale
	 * @param cognome
	 * @param nome
	 * @param giorno
	 * @param sesso
	 * @param mese
	 * @param annoDieci
	 * @param annoZero
	 * @param codComune
	 * @return
	 */
	public boolean calcolaCodiceFiscale(String cognome, String nome, int giorno, String sesso, String mese, String annoDieci, String annoZero, String codComune) {
		
		boolean esito = false;
		String codFiscaleFinale = creaCodiceFiscale(cognome, nome, giorno, sesso, mese, annoDieci, annoZero, codComune);
		log.info("controllo codice fiscale. " + codFiscaleFinale + "--" + getCodFisc());
		if (codFiscaleFinale.equals(getCodFisc()))
			esito = true;
		return esito;
	}

	//controllo il cod fiscale per la modifica
	public boolean calcolaCodiceFiscaleMod(String cognome, String nome) {
		int gs = 0;
		//int i=0;
		int somma = 0;

		String strCodFis = "";
		String strcognome = "";
		String strnome = "";
		String codFiscaleFinale = "";

		boolean esito = false;

		// Processa il cognome
		//----------------------------------------------------------------
		for (int i = 0; i < cognome.length(); i++) {
			switch (cognome.charAt(i)) {
				case 'A' :
				case 'E' :
				case 'I' :
				case 'O' :
				case 'U' :
					break;
				default :
					if ((cognome.charAt(i) <= 'Z') && (cognome.charAt(i) > 'A'))
						strcognome = strcognome + cognome.charAt(i);
			}
		}
		if (strcognome.length() < 3) {
			for (int i = 0; i < cognome.length(); i++) {
				switch (cognome.charAt(i)) {
					case 'A' :
					case 'E' :
					case 'I' :
					case 'O' :
					case 'U' :
						strcognome = strcognome + cognome.charAt(i);
				}
			}
			if (strcognome.length() < 3) {
				for (int i = strcognome.length(); i <= 3; i++) {
					strcognome = strcognome + 'X';
				}
			}
		}
		strcognome = strcognome.substring(0, 3);
		//------------------------------------------------------------

		// processa il nome
		//----------------------------------------------------------------
		for (int i = 0; i < nome.length(); i++) {
			switch (nome.charAt(i)) {
				case 'A' :
				case 'E' :
				case 'I' :
				case 'O' :
				case 'U' :
					break;
				default :
					if ((nome.charAt(i) <= 'Z') && (nome.charAt(i) > 'A'))
						strnome = strnome + nome.charAt(i);
			}
		}
		if (strnome.length() > 3) {
			strnome = strnome.substring(0, 1) + strnome.substring(2, 4);
		} else {
			if (strnome.length() < 3) {
				for (int i = 0; i < nome.length(); i++) {
					switch (nome.charAt(i)) {
						case 'A' :
						case 'E' :
						case 'I' :
						case 'O' :
						case 'U' :
							strnome = strnome + nome.charAt(i);
					}
				}
				if (strnome.length() < 3) {
					for (int i = strnome.length(); i <= 3; i++) {
						strnome = strnome + 'X';
					}
				}
			}
			strnome = strnome.substring(0, 3);
		}
		//--------------------------------------- Fine processa nome

		codFiscaleFinale = strcognome + strnome;

		if (codFiscaleFinale.equals(getCodFisc()))
			esito = true;

		return esito;
	}

	//fine controllo

	public String ritornaMese(String mese) {
		String meseCfr = null;
		String cod = "";
		if (mese.startsWith("0"))
			meseCfr = mese.substring(1);
		else
			meseCfr = mese;

		if (meseCfr.equals("1")) {
			cod = "A";
		} else if (meseCfr.equals("2")) {
			cod = "B";
		} else if (meseCfr.equals("3")) {
			cod = "C";
		} else if (meseCfr.equals("4")) {
			cod = "D";
		} else if (meseCfr.equals("5")) {
			cod = "E";
		} else if (meseCfr.equals("6")) {
			cod = "H";
		} else if (meseCfr.equals("7")) {
			cod = "L";
		} else if (meseCfr.equals("8")) {
			cod = "M";
		} else if (meseCfr.equals("9")) {
			cod = "P";
		} else if (meseCfr.equals("10")) {
			cod = "R";
		} else if (meseCfr.equals("11")) {
			cod = "S";
		} else if (meseCfr.equals("12")) {
			cod = "T";
		}

		return cod;

	}

	

	public static Hashtable creaHashMesi() {
		Hashtable mesi = new Hashtable();

		mesi.put("A", "01"); // gennaio
		mesi.put("B", "02"); // febbraio
		mesi.put("C", "03"); // marzo
		mesi.put("D", "04"); // aprile
		mesi.put("E", "05"); // maggio
		mesi.put("H", "06"); // giugno
		mesi.put("L", "07"); // luglio
		mesi.put("M", "08"); // agosto
		mesi.put("P", "09"); // settembre
		mesi.put("R", "10"); // ottobre
		mesi.put("S", "11"); // novembre
		mesi.put("T", "12"); // dicembre

		return mesi;

	}

	public static boolean controllaCoerenzaDataNascita(String codFiscale, String dataNascita, String sesso) {
		if (controllaData(dataNascita)) {

			// confronto giorno
			int cfg = Integer.parseInt(codFiscale.substring(9, 11));
			if (sesso.equalsIgnoreCase("F"))
				cfg -= 40;
			int dng = Integer.parseInt(dataNascita.substring(0, 2));
			if (cfg != dng)
				return false;

			// confronto mese
			String cfmString = codFiscale.substring(8, 9);
			String cfm = (String) creaHashMesi().get(cfmString);
			String dnm = dataNascita.substring(2, 4);
			if (!cfm.equals(dnm))
				return false;

			// confronto anno
			String cfa = codFiscale.substring(6, 8);
			String dna = dataNascita.substring(6, dataNascita.length());
			if (!cfa.equals(dna))
				return false;

			return true;
		} else
			return false;

	}

	public String creaCodiceFiscale(String cognome, String nome, int giorno, String sesso, String mese, String annoDieci, String annoZero, String codComune) {

		  int gs = 0;
		  int somma = 0;

		  String strCodFis = "";
		    String strcognome = "";
		    String strnome = "";
		    String strgiornosex = "";
		    String chrcontrollo = "";
		    String codFiscaleFinale = "";

		    boolean esito = false;

		    // Processa il cognome
		    //----------------------------------------------------------------
		    for (int i = 0; i < cognome.length(); i++) {
		      switch (cognome.charAt(i)) {
		        case 'A' :
		        case 'E' :
		        case 'I' :
		        case 'O' :
		        case 'U' :
		          break;
		        default :
		          if ((cognome.charAt(i) <= 'Z') && (cognome.charAt(i) > 'A'))
		            strcognome = strcognome + cognome.charAt(i);
		      }
		    }
		    if (strcognome.length() < 3) {
		      for (int i = 0; i < cognome.length(); i++) {
		        switch (cognome.charAt(i)) {
		          case 'A' :
		          case 'E' :
		          case 'I' :
		          case 'O' :
		          case 'U' :
		            strcognome = strcognome + cognome.charAt(i);
		        }
		      }
		      if (strcognome.length() < 3) {
		        for (int i = strcognome.length(); i <= 3; i++) {
		          strcognome = strcognome + 'X';
		        }
		      }
		    }
		    strcognome = strcognome.substring(0, 3);
		    //------------------------------------------------------------

		    // processa il nome
		    //----------------------------------------------------------------
		    for (int i = 0; i < nome.length(); i++) {
		      switch (nome.charAt(i)) {
		        case 'A' :
		        case 'E' :
		        case 'I' :
		        case 'O' :
		        case 'U' :
		          break;
		        default :
		          if ((nome.charAt(i) <= 'Z') && (nome.charAt(i) > 'A'))
		            strnome = strnome + nome.charAt(i);
		      }
		    }
		    if (strnome.length() > 3) {
		      strnome = strnome.substring(0, 1) + strnome.substring(2, 4);
		    } else {
		      if (strnome.length() < 3) {
		        for (int i = 0; i < nome.length(); i++) {
		          switch (nome.charAt(i)) {
		            case 'A' :
		            case 'E' :
		            case 'I' :
		            case 'O' :
		            case 'U' :
		              strnome = strnome + nome.charAt(i);
		          }
		        }
		        if (strnome.length() < 3) {
		          for (int i = strnome.length(); i <= 3; i++) {
		            strnome = strnome + 'X';
		          }
		        }
		      }
		      strnome = strnome.substring(0, 3);
		    }
		    //--------------------------------------- Fine processa nome

		    // processa giorno e sesso
		    //--------------------------------------------
		    int sessoNum = 0;
		    if (sesso.equals("F"))
		      sessoNum = 1;
		    gs = (giorno + (40 * sessoNum));
		    if (gs < 10)
		      strgiornosex = "0" + gs;
		    else
		      strgiornosex = gs + "";
		    //--------------------------------------------

		    strCodFis = strcognome + strnome + annoDieci + annoZero + ritornaMese(mese) + strgiornosex + codComune;

		    // calcola la cifra di controllo
		    //--------------------------------------------
		    for (int i = 0; i < 15; i++) {
		      if (((i + 1) % 2) != 0) //caratteri dispari
		      {
		        switch (strCodFis.charAt(i)) {
		          case '0' :
		          case 'A' : {
		            somma += 1;
		            break;
		          }
		          case '1' :
		          case 'B' : {
		            somma += 0;
		            break;
		          }
		          case '2' :
		          case 'C' : {
		            somma += 5;
		            break;
		          }
		          case '3' :
		          case 'D' : {
		            somma += 7;
		            break;
		          }
		          case '4' :
		          case 'E' : {
		            somma += 9;
		            break;
		          }
		          case '5' :
		          case 'F' : {
		            somma += 13;
		            break;
		          }
		          case '6' :
		          case 'G' : {
		            somma += 15;
		            break;
		          }
		          case '7' :
		          case 'H' : {
		            somma += 17;
		            break;
		          }
		          case '8' :
		          case 'I' : {
		            somma += 19;
		            break;
		          }
		          case '9' :
		          case 'J' : {
		            somma += 21;
		            break;
		          }
		          case 'K' : {
		            somma += 2;
		            break;
		          }
		          case 'L' : {
		            somma += 4;
		            break;
		          }
		          case 'M' : {
		            somma += 18;
		            break;
		          }
		          case 'N' : {
		            somma += 20;
		            break;
		          }
		          case 'O' : {
		            somma += 11;
		            break;
		          }
		          case 'P' : {
		            somma += 3;
		            break;
		          }
		          case 'Q' : {
		            somma += 6;
		            break;
		          }
		          case 'R' : {
		            somma += 8;
		            break;
		          }
		          case 'S' : {
		            somma += 12;
		            break;
		          }
		          case 'T' : {
		            somma += 14;
		            break;
		          }
		          case 'U' : {
		            somma += 16;
		            break;
		          }
		          case 'V' : {
		            somma += 10;
		            break;
		          }
		          case 'W' : {
		            somma += 22;
		            break;
		          }
		          case 'X' : {
		            somma += 25;
		            break;
		          }
		          case 'Y' : {
		            somma += 24;
		            break;
		          }
		          case 'Z' : {
		            somma += 23;
		            break;
		          }
		        }
		      } else //caratteri pari
		      {
		        switch (strCodFis.charAt(i)) {
		          case '0' :
		          case 'A' : {
		            somma += 0;
		            break;
		          }
		          case '1' :
		          case 'B' : {
		            somma += 1;
		            break;
		          }
		          case '2' :
		          case 'C' : {
		            somma += 2;
		            break;
		          }
		          case '3' :
		          case 'D' : {
		            somma += 3;
		            break;
		          }
		          case '4' :
		          case 'E' : {
		            somma += 4;
		            break;
		          }
		          case '5' :
		          case 'F' : {
		            somma += 5;
		            break;
		          }
		          case '6' :
		          case 'G' : {
		            somma += 6;
		            break;
		          }
		          case '7' :
		          case 'H' : {
		            somma += 7;
		            break;
		          }
		          case '8' :
		          case 'I' : {
		            somma += 8;
		            break;
		          }
		          case '9' :
		          case 'J' : {
		            somma += 9;
		            break;
		          }
		          case 'K' : {
		            somma += 10;
		            break;
		          }
		          case 'L' : {
		            somma += 11;
		            break;
		          }
		          case 'M' : {
		            somma += 12;
		            break;
		          }
		          case 'N' : {
		            somma += 13;
		            break;
		          }
		          case 'O' : {
		            somma += 14;
		            break;
		          }
		          case 'P' : {
		            somma += 15;
		            break;
		          }
		          case 'Q' : {
		            somma += 16;
		            break;
		          }
		          case 'R' : {
		            somma += 17;
		            break;
		          }
		          case 'S' : {
		            somma += 18;
		            break;
		          }
		          case 'T' : {
		            somma += 19;
		            break;
		          }
		          case 'U' : {
		            somma += 20;
		            break;
		          }
		          case 'V' : {
		            somma += 21;
		            break;
		          }
		          case 'W' : {
		            somma += 22;
		            break;
		          }
		          case 'X' : {
		            somma += 23;
		            break;
		          }
		          case 'Y' : {
		            somma += 24;
		            break;
		          }
		          case 'Z' : {
		            somma += 25;
		            break;
		          }
		        }
		      }
		    }
		    somma %= 26;
		    switch (somma) {
		      case 0 : {
		        chrcontrollo = "A";
		        break;
		      }
		      case 1 : {
		        chrcontrollo = "B";
		        break;
		      }
		      case 2 : {
		        chrcontrollo = "C";
		        break;
		      }
		      case 3 : {
		        chrcontrollo = "D";
		        break;
		      }
		      case 4 : {
		        chrcontrollo = "E";
		        break;
		      }
		      case 5 : {
		        chrcontrollo = "F";
		        break;
		      }
		      case 6 : {
		        chrcontrollo = "G";
		        break;
		      }
		      case 7 : {
		        chrcontrollo = "H";
		        break;
		      }
		      case 8 : {
		        chrcontrollo = "I";
		        break;
		      }
		      case 9 : {
		        chrcontrollo = "J";
		        break;
		      }
		      case 10 : {
		        chrcontrollo = "K";
		        break;
		      }
		      case 11 : {
		        chrcontrollo = "L";
		        break;
		      }
		      case 12 : {
		        chrcontrollo = "M";
		        break;
		      }
		      case 13 : {
		        chrcontrollo = "N";
		        break;
		      }
		      case 14 : {
		        chrcontrollo = "O";
		        break;
		      }
		      case 15 : {
		        chrcontrollo = "P";
		        break;
		      }
		      case 16 : {
		        chrcontrollo = "Q";
		        break;
		      }
		      case 17 : {
		        chrcontrollo = "R";
		        break;
		      }
		      case 18 : {
		        chrcontrollo = "S";
		        break;
		      }
		      case 19 : {
		        chrcontrollo = "T";
		        break;
		      }
		      case 20 : {
		        chrcontrollo = "U";
		        break;
		      }
		      case 21 : {
		        chrcontrollo = "V";
		        break;
		      }
		      case 22 : {
		        chrcontrollo = "W";
		        break;
		      }
		      case 23 : {
		        chrcontrollo = "X";
		        break;
		      }
		      case 24 : {
		        chrcontrollo = "Y";
		        break;
		      }
		      case 25 : {
		        chrcontrollo = "Z";
		        break;
		      }
		    }
		    //--------------------------------------------

		    codFiscaleFinale = strCodFis + chrcontrollo;
		    log.info(" codice fiscale creato = [ " + codFiscaleFinale + "]");
		    
		  return codFiscaleFinale;
	  }
}
